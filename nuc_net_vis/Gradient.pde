// A simple, general-purpose gradient class.

//  All credit to gradients taken from https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html.

// Gradients:
//   viridis
//   magma
//   plasma
//   inferno

// Just pasted in the hex data so you don't have to load anything here.
final color[] GRADIENT_VIRIDIS = new color[]{0xFFFDED6B,0xFFFCE51E,0xFFF6E41B,0xFFF1E419,0xFFEBE318,0xFFE5E317,0xFFDFE216,0xFFD8E015,0xFFD2E116,0xFFCCDF16,0xFFC6DE18,0xFFBFDE19,0xFFBADD1B,0xFFB4DC1D,0xFFADDB1F,0xFFA8DB22,0xFFA2DA24,0xFF9CD927,0xFF96D72A,0xFF91D62C,0xFF8CD52E,0xFF85D432,0xFF80D334,0xFF7BD137,0xFF76D039,0xFF71CE3D,0xFF6CCD3F,0xFF66CB42,0xFF63CA45,0xFF5FC846,0xFF59C749,0xFF57C44C,0xFF51C34E,0xFF4EC050,0xFF4ABF52,0xFF47BD55,0xFF43BC57,0xFF40B959,0xFF3DB85B,0xFF3AB65D,0xFF37B35F,0xFF34B261,0xFF32B063,0xFF30AD65,0xFF2DAB66,0xFF2BAA68,0xFF2AA769,0xFF28A56B,0xFF26A26C,0xFF25A06E,0xFF249F6F,0xFF239D70,0xFF219A71,0xFF219872,0xFF209673,0xFF1F9274,0xFF1F9275,0xFF1F9075,0xFF1E8E76,0xFF1E8B77,0xFF1E8977,0xFF1E8778,0xFF1E8478,0xFF1E8179,0xFF1F8179,0xFF1E7F7A,0xFF1F7C7A,0xFF1F797A,0xFF1F777B,0xFF20757B,0xFF20737B,0xFF20717B,0xFF20707B,0xFF216D7B,0xFF216B7B,0xFF21697B,0xFF22677B,0xFF22657B,0xFF22637B,0xFF23617B,0xFF235F7B,0xFF245D7B,0xFF255B7B,0xFF25597B,0xFF25577B,0xFF26557B,0xFF26537B,0xFF27517B,0xFF284F7A,0xFF284D7A,0xFF294B7A,0xFF2A497A,0xFF2A477A,0xFF2B4579,0xFF2C4379,0xFF2C4079,0xFF2D3E78,0xFF2E3C78,0xFF2F3B77,0xFF2F3977,0xFF2F3676,0xFF303475,0xFF313275,0xFF322F74,0xFF322D73,0xFF332C72,0xFF342971,0xFF342770,0xFF35256E,0xFF36236D,0xFF35216B,0xFF361E6A,0xFF361D68,0xFF361A67,0xFF371865,0xFF371663,0xFF371461,0xFF37125E,0xFF370F5C,0xFF370D5A,0xFF370B57,0xFF370955,0xFF360552,0xFF360050,0xFF36004D,0xFF35004B,0xFF350048,0xFF340045,0xFF340042};
final color[] GRADIENT_MAGMA = new color[]{0xFFFBFFB2,0xFFFBFAAD,0xFFFBF6AA,0xFFFBF1A5,0xFFFBECA1,0xFFFCE89C,0xFFFCE399,0xFFFCDE95,0xFFFCDA90,0xFFFCD58D,0xFFFDD089,0xFFFDCC85,0xFFFDC782,0xFFFCC37E,0xFFFCBF7B,0xFFFCBA78,0xFFFCB574,0xFFFCB271,0xFFFCAD6E,0xFFFCA86B,0xFFFCA568,0xFFFCA065,0xFFFC9B63,0xFFFC9860,0xFFFC935E,0xFFFC8E5B,0xFFFB8A59,0xFFFA8657,0xFFFA8256,0xFFFA7D54,0xFFF97952,0xFFF97550,0xFFF7704F,0xFFF76C4D,0xFFF6674C,0xFFF5634B,0xFFF5614B,0xFFF35C4A,0xFFF2574A,0xFFF1544A,0xFFEE504A,0xFFED4D4A,0xFFEC494B,0xFFE9464C,0xFFE7434C,0xFFE4404E,0xFFE23D4F,0xFFE03B50,0xFFDC3852,0xFFD93652,0xFFD53354,0xFFD23155,0xFFCF2F57,0xFFCB2D59,0xFFC82C5A,0xFFC42A5C,0xFFC0285E,0xFFBD265E,0xFFBA2760,0xFFB52562,0xFFB12362,0xFFAE2364,0xFFAB2265,0xFFA72066,0xFFA31F67,0xFF9F1F68,0xFF9C1E69,0xFF981D69,0xFF941B6A,0xFF911A6B,0xFF8D196C,0xFF89196C,0xFF86186D,0xFF83176D,0xFF7F166D,0xFF7C156E,0xFF79146E,0xFF75156E,0xFF72136E,0xFF6E126E,0xFF6B116F,0xFF680F6F,0xFF650E6F,0xFF620D6E,0xFF5F0C6E,0xFF5C0B6E,0xFF59096E,0xFF56086E,0xFF53066D,0xFF50046D,0xFF4C006D,0xFF4A006C,0xFF48006B,0xFF45006B,0xFF42006A,0xFF3F0069,0xFF3C0068,0xFF390066,0xFF370065,0xFF330063,0xFF300061,0xFF2E005E,0xFF2A005B,0xFF280058,0xFF260154,0xFF230450,0xFF20064C,0xFF1E0848,0xFF1B0A43,0xFF190A3F,0xFF180B3A,0xFF160B37,0xFF140B33,0xFF130B2E,0xFF110A2A,0xFF0F0A27,0xFF0E0A23,0xFF0C0920,0xFF0B081C,0xFF0A081A,0xFF090717,0xFF070514,0xFF060411,0xFF04030F,0xFF02020C,0xFF02010A,0xFF010107,0xFF000005};
final color[] GRADIENT_PLASMA = new color[]{0xFFEDFC1B,0xFFEEF71E,0xFFEFF31F,0xFFF0EE1F,0xFFF2EA1F,0xFFF4E61F,0xFFF5E11E,0xFFF6DD1E,0xFFF7D81E,0xFFF8D41D,0xFFF9D11D,0xFFF9CC1D,0xFFFAC81E,0xFFFAC41E,0xFFFBC01F,0xFFFBBC1F,0xFFFBB820,0xFFFCB421,0xFFFCB121,0xFFFCAD23,0xFFFCA923,0xFFFBA625,0xFFFBA226,0xFFFB9F27,0xFFFB9B28,0xFFF99829,0xFFF9942B,0xFFF8912C,0xFFF88D2D,0xFFF78A2F,0xFFF58730,0xFFF58431,0xFFF48133,0xFFF37D34,0xFFF17A35,0xFFF07837,0xFFEF7439,0xFFEE713A,0xFFEC6F3B,0xFFEB6C3D,0xFFEA693F,0xFFE86640,0xFFE66441,0xFFE56143,0xFFE45F45,0xFFE15B46,0xFFE05947,0xFFDF5649,0xFFDC544B,0xFFDB524C,0xFFD84E4E,0xFFD74D50,0xFFD54B51,0xFFD44752,0xFFD14654,0xFFCF4357,0xFFCE3F57,0xFFCB3E59,0xFFC93C5B,0xFFC83A5E,0xFFC5365E,0xFFC33560,0xFFC13262,0xFFBE3065,0xFFBC2E67,0xFFBA2B67,0xFFB7296A,0xFFB5276C,0xFFB3246E,0xFFB02270,0xFFAE2072,0xFFAC1D74,0xFFAB1A75,0xFFA61877,0xFFA41679,0xFFA2137B,0xFF9F0F7D,0xFF9D0C80,0xFF9A0882,0xFF970083,0xFF940085,0xFF920087,0xFF8F0088,0xFF8D008A,0xFF89008B,0xFF87008D,0xFF84008F,0xFF810090,0xFF7F0092,0xFF7C0093,0xFF780094,0xFF750094,0xFF720095,0xFF6F0096,0xFF6C0096,0xFF690097,0xFF660097,0xFF630097,0xFF600097,0xFF5D0097,0xFF5A0097,0xFF570097,0xFF540097,0xFF520096,0xFF4F0096,0xFF4C0095,0xFF480095,0xFF460094,0xFF430093,0xFF400092,0xFF3E0091,0xFF3A0090,0xFF37008E,0xFF35008D,0xFF32008C,0xFF2F008A,0xFF2D0089,0xFF290088,0xFF270086,0xFF240085,0xFF220083,0xFF1F0080,0xFF1C007E,0xFF19007D,0xFF15007B,0xFF130079,0xFF0F0076,0xFF0B0074};
final color[] GRADIENT_INFERNO = new color[]{0xFFFCFF93,0xFFF8FE8C,0xFFF4FC84,0xFFF2FA7C,0xFFF0F674,0xFFEFF26A,0xFFEEEE62,0xFFEEEB5B,0xFFEFE653,0xFFF0E24C,0xFFF1DD45,0xFFF1D83F,0xFFF2D33A,0xFFF3CE35,0xFFF4C930,0xFFF5C42B,0xFFF6BF27,0xFFF7BC23,0xFFF7B720,0xFFF8B21C,0xFFF8AD1A,0xFFF8A816,0xFFF9A414,0xFFF99F12,0xFFF99A10,0xFFF9950F,0xFFF9920D,0xFFF98D0C,0xFFF8890C,0xFFF8840C,0xFFF6810C,0xFFF67C0D,0xFFF5780D,0xFFF4740E,0xFFF47010,0xFFF26C11,0xFFF16912,0xFFF06414,0xFFED6216,0xFFEC5E17,0xFFEB5A19,0xFFE8571B,0xFFE7541C,0xFFE5501E,0xFFE34D20,0xFFE14A22,0xFFDE4623,0xFFDC4425,0xFFDA4127,0xFFD73F29,0xFFD53D2A,0xFFD13B2D,0xFFCF372E,0xFFCC3630,0xFFC83333,0xFFC63134,0xFFC22F36,0xFFBF2D37,0xFFBD2C39,0xFFB82A3B,0xFFB6283C,0xFFB3253E,0xFFB02540,0xFFAD2342,0xFFA82144,0xFFA52146,0xFFA21E48,0xFF9E1E48,0xFF9B1C4B,0xFF981A4C,0xFF941B4E,0xFF91194E,0xFF8E1750,0xFF8B1651,0xFF861651,0xFF831453,0xFF801454,0xFF7D1355,0xFF7A1156,0xFF771057,0xFF720F58,0xFF6F0E58,0xFF6C0D59,0xFF690C5A,0xFF660B5A,0xFF620B5A,0xFF5F085B,0xFF5C075B,0xFF59055B,0xFF57035B,0xFF54015B,0xFF50005B,0xFF4D005B,0xFF49005B,0xFF47005B,0xFF45005B,0xFF41005A,0xFF3F0059,0xFF3B0059,0xFF390058,0xFF360057,0xFF330055,0xFF300054,0xFF2E0052,0xFF2A0050,0xFF28004E,0xFF25004B,0xFF230049,0xFF200045,0xFF1D0141,0xFF1B033E,0xFF190539,0xFF160635,0xFF140832,0xFF13082E,0xFF11082A,0xFF0F0826,0xFF0E0822,0xFF0C071F,0xFF0B061B,0xFF0A0617,0xFF080515,0xFF060412,0xFF05030F,0xFF02020C,0xFF02010A,0xFF010107,0xFF000005};

// TODO: Better interpolation

class Gradient {
  
  private color[] grad_data;
  
  Gradient() {}
  Gradient(String preset_name) {
    loadPreset(preset_name);
  }
  color getLerp(float value) {
    color color1 = grad_data[max(min(floor(value*(float)(grad_data.length-1)), grad_data.length-1), 0)];
    color color2 = grad_data[max(min(ceil(value*(float)(grad_data.length-1)), grad_data.length-1), 0)];
    float lerpval = value*(float)(grad_data.length-1) - (float)floor(value*(float)(grad_data.length-1));
    println(lerpval);
    println(floor(value*(float)grad_data.length) + " " + ceil(value*(float)grad_data.length));
    return lerpColor(color1, color2, lerpval);
  }
  // Incoming value's min and max
  color getLerp(float value, float min, float max) {
    return getLerp(map(value, min, max, 0.f, 1.f));
  }
  color getGrad(float value) {
    return grad_data[max(min(round(value*(float)grad_data.length), grad_data.length-1), 0)];
  }
  // Incoming value's min and max
  color getGrad(float value, float min, float max) {
    return getGrad(map(value, min, max, 0.f, 1.f));
  }
  void loadPreset(String name) {
    //Should hopefully work now with JDK 7... (switch statements with strings)
    switch(name.toLowerCase()) {
      case "viridis":
        grad_data = GRADIENT_VIRIDIS;
        break;
      case "magma":
        grad_data = GRADIENT_MAGMA;
        break;
      case "plasma":
        grad_data = GRADIENT_PLASMA;
        break;
      case "inferno":
        grad_data = GRADIENT_INFERNO;
        break;
    }
  }
  void loadGradient(String path_to_gradient) {
    this.loadGradient(loadImage(path_to_gradient));
  }
  void loadGradient(PImage p) {
    //We can't write directly into the array, we might get copied values if the source image's gradient's color bands are bigger than one pixel.
    ArrayList<Integer> tempColors = new ArrayList<Integer>();
    color prevColor = 0;
    for(int x = 0; x < p.width; x++) {
      color c = p.pixels[x];
      if(c != prevColor) {
        tempColors.add(c);
        prevColor = c;
      }
    }
    grad_data = new color[tempColors.size()];
    for(int i = 0; i < tempColors.size(); i++) {
      grad_data[i] = tempColors.get(i);
    }
  }
  void customGradient(color... colors) {
    grad_data = new color[colors.length];
    for(int i = 0; i < colors.length; i++) {
      grad_data[i] = colors[i];
    }
  }
}
